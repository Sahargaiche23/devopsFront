{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EtudiantService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8089/kaddem/etudiant'; // Corrigé avec le chemin complet incluant '/kaddem'\n  }\n  // Récupère la liste de tous les étudiants\n  getEtudiants() {\n    return this.http.get(`${this.baseUrl}/retrieve-all-etudiants`);\n  }\n  // Récupère un étudiant par son identifiant\n  getEtudiant(id) {\n    return this.http.get(`${this.baseUrl}/retrieve-etudiant/${id}`);\n  }\n  // Ajoute un nouvel étudiant\n  addEtudiant(etudiant) {\n    return this.http.post(`${this.baseUrl}/add-etudiant`, etudiant);\n  }\n  // Met à jour les informations d'un étudiant\n  updateEtudiant(etudiant) {\n    return this.http.put(`${this.baseUrl}/update-etudiant`, etudiant);\n  }\n  // Supprime un étudiant par son identifiant\n  deleteEtudiant(id) {\n    return this.http.delete(`${this.baseUrl}/remove-etudiant/${id}`); // Correction ici du chemin\n  }\n  static #_ = this.ɵfac = function EtudiantService_Factory(t) {\n    return new (t || EtudiantService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EtudiantService,\n    factory: EtudiantService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EtudiantService","constructor","http","baseUrl","getEtudiants","get","getEtudiant","id","addEtudiant","etudiant","post","updateEtudiant","put","deleteEtudiant","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/sahar/Téléchargements/DevOps_project-main/KhaddemFront/src/app/services/etudiant.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Etudiant } from '../models/Etudiant'; \n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EtudiantService {\n  private baseUrl = 'http://localhost:8089/kaddem/etudiant'; // Corrigé avec le chemin complet incluant '/kaddem'\n\n  constructor(private http: HttpClient) { }\n\n  // Récupère la liste de tous les étudiants\n  getEtudiants(): Observable<Etudiant[]> {\n    return this.http.get<Etudiant[]>(`${this.baseUrl}/retrieve-all-etudiants`);\n  }\n\n  // Récupère un étudiant par son identifiant\n  getEtudiant(id: number): Observable<Etudiant> {\n    return this.http.get<Etudiant>(`${this.baseUrl}/retrieve-etudiant/${id}`);\n  }\n\n  // Ajoute un nouvel étudiant\n  addEtudiant(etudiant: Etudiant): Observable<Etudiant> {\n    \n    return this.http.post<Etudiant>(`${this.baseUrl}/add-etudiant`, etudiant);\n  }\n\n  // Met à jour les informations d'un étudiant\n  updateEtudiant(etudiant: Etudiant): Observable<Etudiant> {\n    return this.http.put<Etudiant>(`${this.baseUrl}/update-etudiant`, etudiant);\n  }\n\n  // Supprime un étudiant par son identifiant\n  deleteEtudiant(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/remove-etudiant/${id}`);  // Correction ici du chemin\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,uCAAuC,CAAC,CAAC;EAEnB;EAExC;EACAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,GAAG,IAAI,CAACF,OAAO,yBAAyB,CAAC;EAC5E;EAEA;EACAG,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,OAAO,sBAAsBI,EAAE,EAAE,CAAC;EAC3E;EAEA;EACAC,WAAWA,CAACC,QAAkB;IAE5B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAW,GAAG,IAAI,CAACP,OAAO,eAAe,EAAEM,QAAQ,CAAC;EAC3E;EAEA;EACAE,cAAcA,CAACF,QAAkB;IAC/B,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAW,GAAG,IAAI,CAACT,OAAO,kBAAkB,EAAEM,QAAQ,CAAC;EAC7E;EAEA;EACAI,cAAcA,CAACN,EAAU;IACvB,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAO,GAAG,IAAI,CAACX,OAAO,oBAAoBI,EAAE,EAAE,CAAC,CAAC,CAAE;EAC3E;EAAC,QAAAQ,CAAA,G;qBA7BUf,eAAe,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfpB,eAAe;IAAAqB,OAAA,EAAfrB,eAAe,CAAAsB,IAAA;IAAAC,UAAA,EAFd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}