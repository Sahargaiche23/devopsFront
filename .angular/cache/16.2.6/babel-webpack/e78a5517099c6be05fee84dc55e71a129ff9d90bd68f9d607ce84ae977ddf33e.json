{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UniversiteService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8089/kaddem/universite'; // Corrected base URL\n  }\n  // Retrieve the list of all universities\n  getUniversites() {\n    return this.http.get(`${this.baseUrl}/retrieve-all-universites`);\n  }\n  // Retrieve a university by its ID\n  getUniversite(id) {\n    return this.http.get(`${this.baseUrl}/retrieve-universite/${id}`);\n  }\n  // Add a new university\n  addUniversite(universite) {\n    return this.http.post(`${this.baseUrl}/add-universite`, universite);\n  }\n  // Update the information of a university\n  updateUniversite(universite) {\n    return this.http.put(`${this.baseUrl}/update-universite`, universite);\n  }\n  // Remove a university by ID\n  deleteUniversite(id) {\n    return this.http.delete(`${this.baseUrl}/remove-universite/${id}`);\n  }\n  // Assign a university to a department\n  affecterUniversiteToDepartement(universiteId, departementId) {\n    return this.http.put(`${this.baseUrl}/affecter-universite-departement/${universiteId}/${departementId}`, null);\n  }\n  // Retrieve list of departments in a university\n  getDepartementsByUniversite(id) {\n    return this.http.get(`${this.baseUrl}/listerDepartementsUniversite/${id}`);\n  }\n  static #_ = this.ɵfac = function UniversiteService_Factory(t) {\n    return new (t || UniversiteService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UniversiteService,\n    factory: UniversiteService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UniversiteService","constructor","http","baseUrl","getUniversites","get","getUniversite","id","addUniversite","universite","post","updateUniversite","put","deleteUniversite","delete","affecterUniversiteToDepartement","universiteId","departementId","getDepartementsByUniversite","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/sahar/Téléchargements/DevOps_project-main/KhaddemFront/src/app/components/universite/universite.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Universite } from '../models/Universite';\nimport { Departement } from '../models/Departement';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UniversiteService {\n  private baseUrl = 'http://localhost:8089/kaddem/universite'; // Corrected base URL\n\n  constructor(private http: HttpClient) {}\n\n  // Retrieve the list of all universities\n  getUniversites(): Observable<Universite[]> {\n    return this.http.get<Universite[]>(`${this.baseUrl}/retrieve-all-universites`);\n  }\n\n  // Retrieve a university by its ID\n  getUniversite(id: number): Observable<Universite> {\n    return this.http.get<Universite>(`${this.baseUrl}/retrieve-universite/${id}`);\n  }\n\n  // Add a new university\n  addUniversite(universite: Universite): Observable<Universite> {\n    return this.http.post<Universite>(`${this.baseUrl}/add-universite`, universite);\n  }\n\n  // Update the information of a university\n  updateUniversite(universite: Universite): Observable<Universite> {\n    return this.http.put<Universite>(`${this.baseUrl}/update-universite`, universite);\n  }\n\n  // Remove a university by ID\n  deleteUniversite(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/remove-universite/${id}`);\n  }\n\n  // Assign a university to a department\n  affecterUniversiteToDepartement(universiteId: number, departementId: number): Observable<void> {\n    return this.http.put<void>(`${this.baseUrl}/affecter-universite-departement/${universiteId}/${departementId}`, null);\n  }\n\n  // Retrieve list of departments in a university\n  getDepartementsByUniversite(id: number): Observable<Departement[]> {\n    return this.http.get<Departement[]>(`${this.baseUrl}/listerDepartementsUniversite/${id}`);\n  }\n}\n"],"mappings":";;AASA,OAAM,MAAOA,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,yCAAyC,CAAC,CAAC;EAEtB;EAEvC;EACAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,GAAG,IAAI,CAACF,OAAO,2BAA2B,CAAC;EAChF;EAEA;EACAG,aAAaA,CAACC,EAAU;IACtB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAa,GAAG,IAAI,CAACF,OAAO,wBAAwBI,EAAE,EAAE,CAAC;EAC/E;EAEA;EACAC,aAAaA,CAACC,UAAsB;IAClC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAa,GAAG,IAAI,CAACP,OAAO,iBAAiB,EAAEM,UAAU,CAAC;EACjF;EAEA;EACAE,gBAAgBA,CAACF,UAAsB;IACrC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAa,GAAG,IAAI,CAACT,OAAO,oBAAoB,EAAEM,UAAU,CAAC;EACnF;EAEA;EACAI,gBAAgBA,CAACN,EAAU;IACzB,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAO,GAAG,IAAI,CAACX,OAAO,sBAAsBI,EAAE,EAAE,CAAC;EAC1E;EAEA;EACAQ,+BAA+BA,CAACC,YAAoB,EAAEC,aAAqB;IACzE,OAAO,IAAI,CAACf,IAAI,CAACU,GAAG,CAAO,GAAG,IAAI,CAACT,OAAO,oCAAoCa,YAAY,IAAIC,aAAa,EAAE,EAAE,IAAI,CAAC;EACtH;EAEA;EACAC,2BAA2BA,CAACX,EAAU;IACpC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAgB,GAAG,IAAI,CAACF,OAAO,iCAAiCI,EAAE,EAAE,CAAC;EAC3F;EAAC,QAAAY,CAAA,G;qBAtCUnB,iBAAiB,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBxB,iBAAiB;IAAAyB,OAAA,EAAjBzB,iBAAiB,CAAA0B,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}